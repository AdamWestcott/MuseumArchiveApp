@page "/provenanceRecord/create"
@page "/provenanceRecord/edit/{Id}"
@using Models
@using Business.Repository.IRepository
@using System;
@using System.Net;
@using System.IO;
@using Radzen
@using Radzen.Blazor
@using BlazorInputFile
@inject IProvenanceRecordRepository ProvenanceRepository
@inject MuseumArchivalAppServer.Areas.StoredModel.StoredItems stored
@inject NavigationManager NavigationManager
<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Provenance Record</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="ProvenanceRecordModel" OnValidSubmit="ProvidenceHandlerUpsert">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label>Upload Image of Item</label>
                        <button type="button" class="btn btn-primary" onclick="document.getElementById('picker').click()">Choose Image</button>
                        <BlazorInputFile.InputFile id="picker" OnChange="@(e => HandleImageUpload(e))" accept=".jpg, .jpeg, .png" hidden></BlazorInputFile.InputFile>
                        @if (IsProvidenceImageSet == true)
                        {
                            <RadzenImage Path="@ProvidenceImageBase64" style="width: 80px; height: 80px; border-radius: 8px;"></RadzenImage>
                        }
                    </div>
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="ProvenanceRecordModel.ProvenanceName" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <RadzenHtmlEditor @bind-Value="ProvenanceRecordModel.ProvenanceDescription" Disabled="false" Style="height: 300px; margin-bottom: 1rem; background-color: lightgray"></RadzenHtmlEditor>
                        @*<InputText @bind-Value="ArchivalItemModel.ArchivalItemLongDescription" class="form-control"></InputText>*@
                    </div>
                    <div class="form-group">
                        <label>Location Of Purchase</label>
                        <RadzenHtmlEditor @bind-Value="ProvenanceRecordModel.ProvenanceLocationOfPurchase" Disabled="false" Style="height: 300px; margin-bottom: 1rem; background-color: lightgray"></RadzenHtmlEditor>
                        @*<InputText @bind-Value="ArchivalItemModel.ArchivalItemLongDescription" class="form-control"></InputText>*@
                    </div>
                    <div class="form-group">
                        <label>Date of Purchase</label>
                        <InputDate @bind-Value="ProvenanceRecordModel.ProvenanceDateOfPurchase" class="form-control"></InputDate>
                    </div>
                    <div class="form-group">
                        <label>Purchase Value</label>
                        <InputNumber @bind-Value="ProvenanceRecordModel.PurchaseValue" class="form-control"></InputNumber>
                        @*<InputText @bind-Value="ArchivalItemModel.ArchivalItemLongDescription" class="form-control"></InputText>*@
                    </div>
                    <div class="form-group">
                        <label>Number of Prior Owners</label>
                        <InputNumber @bind-Value="ProvenanceRecordModel.ProvenanceNumberOfPriorOwners" class="form-control"></InputNumber>
                        @*<InputText @bind-Value="ArchivalItemModel.ArchivalItemLongDescription" class="form-control"></InputText>*@
                    </div>
                    <div class="form-group">
                        <label>Notes</label>
                        <RadzenHtmlEditor @bind-Value="ProvenanceRecordModel.ProvenanceNotes" Disabled="false" Style="height: 300px; margin-bottom: 1rem; background-color: lightgray"></RadzenHtmlEditor>
                        @*<InputText @bind-Value="ArchivalItemModel.ArchivalItemLongDescription" class="form-control"></InputText>*@
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Provenance</button>
                        <NavLink href="archive" class="btn btn-secondary">Back to Archival</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public string Id { get; set; }
    public string providenceId { get; set; }
    private ProvenanceRecordDTO ProvenanceRecordModel { get; set; } = new ProvenanceRecordDTO();
    private string Title { get; set; } = "Create";
    string htmlValue = "";
    public bool IsProvidenceImageSet = false;
    string ProvidenceImageBase64 = "";

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            Title = "Update";
            ProvenanceRecordModel = await ProvenanceRepository.GetProvenanceRecord(Id);
            ProvidenceImageBase64 = "data:image/jpg;base64, " + Convert.ToBase64String(ProvenanceRecordModel.ProvenanceRecordImage);
            IsProvidenceImageSet = true;
        }

        else
        {
            ProvenanceRecordModel = new ProvenanceRecordDTO();
            ProvenanceRecordModel.Id = Guid.NewGuid().ToString();
            providenceId = stored.getProvidenceID();
            ProvenanceRecordModel.ProvidenceID = providenceId;
            ProvenanceRecordModel.ProvenanceDateOfPurchase = DateTime.Now;

        }
    }

    public async void HandleImageUpload(IFileListEntry[] files)
    {
        ProvenanceRecordModel.ProvenanceRecordImage = await FileSender(files.FirstOrDefault());
        ProvidenceImageBase64 = "data:image/jpg;base64, " + Convert.ToBase64String(ProvenanceRecordModel.ProvenanceRecordImage);
        IsProvidenceImageSet = true;
    }

    public async Task<byte[]> FileSender(IFileListEntry file)
    {
        using (var ms = new System.IO.MemoryStream())
        {
            await file.Data.CopyToAsync(ms);
            return ms.ToArray();
        }

    }

    private async Task ProvidenceHandlerUpsert()
    {
        try
        {
            if ((ProvenanceRecordModel.Id != "") && Title == "Update")
            {
                //update
                var UpdateEmployee = await ProvenanceRepository.UpdateProvenanceRecord(ProvenanceRecordModel.Id, ProvenanceRecordModel);
            }

            else
            {
                var CreatedEmployee = await ProvenanceRepository.CreateProvenanceRecord(ProvenanceRecordModel);
            }

        }
        catch
        {

        }

        NavigationManager.NavigateTo("archive");
    }
}
