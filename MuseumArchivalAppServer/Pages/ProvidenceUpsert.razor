@page "/providence/create"
@page "/providence/edit/{Id}"
@using Models
@using Business.Repository.IRepository
@using System;
@using System.Net;
@using System.IO;
@using Radzen
@using Radzen.Blazor
@using BlazorInputFile
@inject IProvidenceRepository ProvidenceRepository
@inject MuseumArchivalAppServer.Areas.StoredModel.StoredItems stored
@inject NavigationManager NavigationManager
<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Providence</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="ProvidenceModel" OnValidSubmit="ProvidenceHandlerUpsert">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label>Upload Image of Item</label>
                        <button type="button" class="btn btn-primary" onclick="document.getElementById('picker').click()">Choose Image</button>
                        <BlazorInputFile.InputFile id="picker" OnChange="@(e => HandleImageUpload(e))" accept=".jpg, .jpeg, .png" hidden></BlazorInputFile.InputFile>
                    </div>
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="ProvidenceModel.ProvidenceName" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>Date of Purchase</label>
                        <InputDate @bind-Value="ProvidenceModel.ProvidenceDateOfPurchase" class="form-control"></InputDate>
                    </div>
                    <div class="form-group">
                        <label>Purchase Value</label>
                        <InputNumber @bind-Value="ProvidenceModel.PurchaseValue" class="form-control"></InputNumber>
                        @*<InputText @bind-Value="ArchivalItemModel.ArchivalItemLongDescription" class="form-control"></InputText>*@
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Providence</button>
                        <NavLink href="archive" class="btn btn-secondary">Back to Archival</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public string Id { get; set; }
    public string providenceId { get; set; }
    private ProvidenceDTO ProvidenceModel { get; set; } = new ProvidenceDTO();
    private string Title { get; set; } = "Create";
    string htmlValue = "";

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            Title = "Update";
            ProvidenceModel = await ProvidenceRepository.GetProvidence(Id);
        }

        else
        {
            ProvidenceModel = new ProvidenceDTO();
            ProvidenceModel.Id = Guid.NewGuid().ToString();
            providenceId = stored.getArchivalItemID();
            ProvidenceModel.ArchivalItemID = providenceId;
            ProvidenceModel.ProvidenceDateOfPurchase = DateTime.Now;

        }
    }

    public async void HandleImageUpload(IFileListEntry[] files)
    {
        ProvidenceModel.ProvidenceImage = await FileSender(files.FirstOrDefault());
    }

    public async Task<byte[]> FileSender(IFileListEntry file)
    {
        using (var ms = new System.IO.MemoryStream())
        {
            await file.Data.CopyToAsync(ms);
            return ms.ToArray();
        }

    }

    private async Task ProvidenceHandlerUpsert()
    {
        try
        {
            if ((ProvidenceModel.Id != "") && Title == "Update")
            {
                //update
                var UpdateEmployee = await ProvidenceRepository.UpdateProvidence(ProvidenceModel.Id, ProvidenceModel);
            }

            else
            {
                var CreatedEmployee = await ProvidenceRepository.CreateProvidence(ProvidenceModel);
            }

        }
        catch
        {

        }

        NavigationManager.NavigateTo("archive");
    }
}
