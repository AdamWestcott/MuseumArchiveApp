// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace MuseumArchivalAppServer.Pages
{
    #line hidden
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using MuseumArchivalAppServer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using MuseumArchivalAppServer.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\Pages\ArchivalItemUpsert.razor"
using Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\Pages\ArchivalItemUpsert.razor"
using Business.Repository.IRepository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\Pages\ArchivalItemUpsert.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\Pages\ArchivalItemUpsert.razor"
using System.Net;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\Pages\ArchivalItemUpsert.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\Pages\ArchivalItemUpsert.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\Pages\ArchivalItemUpsert.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\Pages\ArchivalItemUpsert.razor"
using Telerik.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\Pages\ArchivalItemUpsert.razor"
using Telerik.Blazor.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\Pages\ArchivalItemUpsert.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/archive/create")]
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/archive/edit/{Id}")]
    public partial class ArchivalItemUpsert : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 194 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\Pages\ArchivalItemUpsert.razor"
 
    [Parameter]
    public string Id { get; set; }
    private ArchivalItemDTO ArchivalItemModel { get; set; } = new ArchivalItemDTO();
    private string Title { get; set; } = "Create";
    string htmlValue = "";
    public bool KeywordTagOpen = false;
    public bool IsArchivalImageSet = false;
    string ArchivalImageBase64 = "";
    //Keywords
    RadzenDataGrid<KeywordTagDTO> grid;
    string keyword = "";
    string collectionName = "";

    IEnumerable<KeywordTagDTO> keywords;
    List<KeywordTagDTO> KeywordList = new List<KeywordTagDTO>();
    IList<KeywordTagDTO> selectedKeywords;
    IList<KeywordTagDTO> oldselectedKeywords;

    IEnumerable<KeywordTagGroupDTO> filteredKeywordGroups = new List<KeywordTagGroupDTO>();
    bool allowRowSelectOnRowClick = true;
    KeywordTagGroupDTO doesArhcivalGroupExist;

    IEnumerable<CollectionDTO> collections;
    List<CollectionDTO> collectionsList = new List<CollectionDTO>();

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            Title = "Update";
            ArchivalItemModel = await ArchivalRepository.GetArchivalItem(Id);
            ArchivalImageBase64 = "data:image/jpg;base64, " + Convert.ToBase64String(ArchivalItemModel.ArchivalItemImage);
            IsArchivalImageSet = true;
        }

        else
        {
            ArchivalItemModel = new ArchivalItemDTO();
            ArchivalItemModel.Id = Guid.NewGuid().ToString();
            ArchivalItemModel.ArchivalItemReference = Guid.NewGuid().ToString();
            ArchivalItemModel.ArchivalItemCreationDate = DateTime.Now;
        }
        keywords = await KeywordTagRepository.GetAllKeywordTags();
        collections = await CollectionRepository.GetAllCollections();
        collectionsList = collections.ToList();
    }

    public async void HandleImageUpload(IFileListEntry[] files)
    {
        ArchivalItemModel.ArchivalItemImage = await FileSender(files.FirstOrDefault());
        ArchivalImageBase64 = "data:image/jpg;base64, " + Convert.ToBase64String(ArchivalItemModel.ArchivalItemImage);
        IsArchivalImageSet = true;
    }

    public async Task<byte[]> FileSender(IFileListEntry file)
    {
        using (var ms = new System.IO.MemoryStream())
        {
            await file.Data.CopyToAsync(ms);
            return ms.ToArray();
        }

    }

    private async Task EmployeeHandlerUpsert()
    {
        try
        {
            if (ArchivalItemModel.CollectionId == "")
            {
                //update
                ArchivalItemModel.IsPartOfACollection = false;
            }

            if (ArchivalItemModel.IsPartOfACollection == false)
            {
                //update
                ArchivalItemModel.CollectionId = "";
            }

            if ((ArchivalItemModel.Id != "") && Title == "Update")
            {
                //update
                var UpdateEmployee = await ArchivalRepository.UpdateArchivalItem(ArchivalItemModel.Id, ArchivalItemModel);
            }

            else
            {
                var CreatedEmployee = await ArchivalRepository.CreateArchivalItem(ArchivalItemModel);
            }

        }
        catch
        {

        }

        NavigationManager.NavigateTo("archive");
    }

    public async void OpenPopup()
    {
        KeywordTagOpen = true;
        KeywordList.Clear();
        selectedKeywords = null;

        filteredKeywordGroups = await KeywordTagGroupRepository.GetAllKeywordTagGroupsByArchivalItemID(ArchivalItemModel.Id);

        foreach (var unitStandardJoin in filteredKeywordGroups)
        {
            KeywordList.Add(await KeywordTagRepository.GetKeywordTag(unitStandardJoin.keywordTagID));
        }

        keywords.OrderBy(s => s.keywordTagName);
        List<KeywordTagDTO> templist = new List<KeywordTagDTO>();

        foreach (var standard in KeywordList)
        {
            templist.Add(keywords.FirstOrDefault(x => x.keywordTagName == standard.keywordTagName));
        }

        selectedKeywords = templist;
        oldselectedKeywords = selectedKeywords;

        //await Task.Delay(5000);

        //foreach (var standard in selectedStandards)
        //{
        //    await grid.SelectRow(standard);
        //}
    }

    public void ClosePopup()
    {
        KeywordTagOpen = false;

        selectedKeywords = null;
    }

    public async void SaveSelectionPopup()
    {
        KeywordTagOpen = false;
        KeywordTagGroupDTO unitstandardjoin = new KeywordTagGroupDTO();

        foreach (var oldstandard in oldselectedKeywords)
        {
            if (!selectedKeywords.Contains(oldstandard))
            {
                doesArhcivalGroupExist = await KeywordTagGroupRepository.DoesKeywordTagGroupExist(oldstandard.keywordTagName, ArchivalItemModel.Id);
                if (doesArhcivalGroupExist != null)
                {
                    await KeywordTagGroupRepository.DeleteKeywordTagGroup(doesArhcivalGroupExist.keywordTagGroupID);
                }
            }
        }

        foreach (var standard in selectedKeywords)
        {

            if (filteredKeywordGroups.Any(x => x.keywordTagName == standard.keywordTagName && x.ArchivalItemID == ArchivalItemModel.Id))
            {

            }

            else
            {
                unitstandardjoin.keywordTagGroupID = Guid.NewGuid().ToString();
                unitstandardjoin.keywordTagID = standard.keywordTagID;
                unitstandardjoin.keywordTagName = standard.keywordTagName;
                unitstandardjoin.ArchivalItemID = ArchivalItemModel.Id;
                await KeywordTagGroupRepository.CreateKeywordTagGroup(unitstandardjoin);
            }


        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICollectionRepository CollectionRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IKeywordTagGroupRepository KeywordTagGroupRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IKeywordTagRepository KeywordTagRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IArchivalItemRepository ArchivalRepository { get; set; }
    }
}
#pragma warning restore 1591
