// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace MuseumArchivalAppServer.Pages
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using MuseumArchivalAppServer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\_Imports.razor"
using MuseumArchivalAppServer.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\Pages\ArchiveList.razor"
using Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\Pages\ArchiveList.razor"
using Business.Repository.IRepository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\Pages\ArchiveList.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\Pages\ArchiveList.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\Pages\ArchiveList.razor"
using Telerik;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\Pages\ArchiveList.razor"
using Telerik.Blazor.Components;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/archive")]
    public partial class ArchiveList : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 210 "C:\Users\adam2\Documents\MuesumArchiveApp\MuseumArchiveApp\MuseumArchivalAppServer\Pages\ArchiveList.razor"
       
    private IEnumerable<ArchivalItemDTO> ArchivalItems { get; set; } = new List<ArchivalItemDTO>();
    private IEnumerable<ArchivalItemDTO> AllArchivalItems { get; set; } = new List<ArchivalItemDTO>();
    private List<ArchivalItemDTO> FilteredArchivalItems { get; set; } = new List<ArchivalItemDTO>();
    private List<ArchivalItemDTO> SimilarArchivalItems { get; set; } = new List<ArchivalItemDTO>();
    private ProvidenceDTO ProvidenceModel { get; set; } = new ProvidenceDTO();
    ArchivalItemDTO tempArchivalItem;
    ArchivalItemDTO SelectedArchivalItem;
    ProvidenceDTO CreatedProvidence;
    private string DeleteID { get; set; } = null;
    string archivalImage = "";
    string ArchivalItemID = "";
    string ArchivalItemName = "";
    string ArchivalItemReference = "";
    string providenceImage = "";
    bool isArchivalItemSelected = false;
    bool isProvenanceCreated = false;
    private IEnumerable<KeywordTagDTO> KeywordTags { get; set; } = new List<KeywordTagDTO>();
    private IEnumerable<ProvidenceDTO> Providences{ get; set; } = new List<ProvidenceDTO>();
    private IEnumerable<ProvenanceRecordDTO> FilteredProvenanceRecords { get; set; } = new List<ProvenanceRecordDTO>();
    private IEnumerable<KeywordTagGroupDTO> TempKeywordTagGroups { get; set; } = new List<KeywordTagGroupDTO>();
    private IEnumerable<KeywordTagGroupDTO> KeywordTagGroups { get; set; } = new List<KeywordTagGroupDTO>();
    private IEnumerable<KeywordTagGroupDTO> FilteredKeywordTagGroups { get; set; } = new List<KeywordTagGroupDTO>();
    List<string> keywordNames = new List<string>();
    List<string> keywordgroupIds = new List<string>();
    List<string> keywordsForFilter = new List<string>();
    List<string> keywordNamesFilterList = new List<string>();
    RadzenDataGrid<ArchivalItemDTO> radzenArchivalItemGrid;
    RadzenDataGrid<ArchivalItemDTO> radzenSimilarArchivalItemGrid;
    RadzenDataGrid<ProvenanceRecordDTO> radzenProvidenceGrid;
    string Title = "Create";
    string TableSearch = "";

    protected override async Task OnInitializedAsync()
    {
        ArchivalItems = await ArchivalRepository.GetAllArchivalItems();
        AllArchivalItems = ArchivalItems;
        KeywordTagGroups = await KeywordTagGroupRepository.GetAllKeywordTagGroups();
        KeywordTags = await KeywordTagRepository.GetAllKeywordTags();
        foreach (var keyword in KeywordTags)
        {
            if (!keywordsForFilter.Contains(keyword.keywordTagName))
            {
                keywordsForFilter.Add(keyword.keywordTagName);
            }
        }
    }

    public async void SelectArchivalItem(string archvialItemID)
    {
        isArchivalItemSelected = false;
        isProvenanceCreated = false;
        StateHasChanged();
        keywordgroupIds.Clear();
        keywordNames.Clear();
        SimilarArchivalItems.Clear();
        ArchivalItemID = archvialItemID;
        SelectedArchivalItem = await ArchivalRepository.GetArchivalItem(ArchivalItemID);
        ArchivalItemName = SelectedArchivalItem.ArchivalItemName;
        ArchivalItemReference = SelectedArchivalItem.ArchivalItemReference;
        Providences = await ProvidenceRepository.GetAllProvidencesByArchivalItemID(ArchivalItemID);
        if(Providences.Any())
        {
            isProvenanceCreated = true;
            CreatedProvidence = Providences.First();
            stored.setProvidenceID(CreatedProvidence.Id);
            FilteredProvenanceRecords = await ProvenanceRepository.GetAllProvenanceRecordsByProvidenceID(CreatedProvidence.Id);
        }
        else
        {
            ProvidenceModel.Id = Guid.NewGuid().ToString();
            ProvidenceModel.ArchivalItemID = ArchivalItemID;
        }
        stored.setArchivalItemID(ArchivalItemID);
        FilteredKeywordTagGroups = await KeywordTagGroupRepository.GetAllKeywordTagGroupsByArchivalItemID(ArchivalItemID);
        foreach (var group in FilteredKeywordTagGroups)
        {
            keywordNames.Add(group.keywordTagName);
        }
        foreach (var keyword in keywordNames)
        {
            TempKeywordTagGroups = await KeywordTagGroupRepository.GetAllKeywordTagGroupsByKeywordName(keyword);

            foreach (var keywordGroup in TempKeywordTagGroups)
            {

                if (!keywordgroupIds.Contains(keywordGroup.ArchivalItemID) && keywordGroup.ArchivalItemID != ArchivalItemID)
                {
                    keywordgroupIds.Add(keywordGroup.ArchivalItemID);
                }
            }

            foreach (var keywordGroupArchivalID in keywordgroupIds)
            {
                tempArchivalItem = await ArchivalRepository.GetArchivalItem(keywordGroupArchivalID);
                if (!SimilarArchivalItems.Any(prod => prod.Id == keywordGroupArchivalID))
                {
                    SimilarArchivalItems.Add(tempArchivalItem);
                }
            }
        }
        StateHasChanged();
        isArchivalItemSelected = true;
        if (radzenSimilarArchivalItemGrid != null)
        {
            await radzenSimilarArchivalItemGrid.Reload();
        }
        StateHasChanged();

    }

    public async void changeFilter()
    {
        isArchivalItemSelected = false;
        ArchivalItems = new List<ArchivalItemDTO>();
        keywordgroupIds.Clear();
        FilteredArchivalItems.Clear();
        if (keywordNamesFilterList != null)
        {
            if (keywordNamesFilterList.Any())
            {
                foreach (var keyword in keywordNamesFilterList)
                {
                    TempKeywordTagGroups = await KeywordTagGroupRepository.GetAllKeywordTagGroupsByKeywordName(keyword);

                    foreach (var keywordGroup in TempKeywordTagGroups)
                    {

                        if (!keywordgroupIds.Contains(keywordGroup.ArchivalItemID))
                        {
                            keywordgroupIds.Add(keywordGroup.ArchivalItemID);
                        }
                    }

                    foreach (var keywordGroupArchivalID in keywordgroupIds)
                    {
                        tempArchivalItem = await ArchivalRepository.GetArchivalItem(keywordGroupArchivalID);
                        if (!FilteredArchivalItems.Any(prod => prod.Id == keywordGroupArchivalID))
                        {
                            FilteredArchivalItems.Add(tempArchivalItem);
                        }
                    }
                }
                ArchivalItems = FilteredArchivalItems;
            }
            else
            {
                ArchivalItems = AllArchivalItems;
            }
        }
        else
        {
            ArchivalItems = AllArchivalItems;
        }
        StateHasChanged();
        if (radzenArchivalItemGrid != null)
        {
            await radzenArchivalItemGrid.Reload();
        }
        //await radzenSimilarArchivalItemGrid.Reload();
        StateHasChanged();

    }

    public async void changeFilterText()
    {
        isArchivalItemSelected = false;
        ArchivalItems = new List<ArchivalItemDTO>();
        keywordgroupIds.Clear();
        FilteredArchivalItems.Clear();
        if (TableSearch != null)
        {
            foreach (var item in AllArchivalItems)
            {

                if (item.ArchivalItemName.ToLower().Contains(TableSearch.ToLower()))
                {
                    FilteredArchivalItems.Add(item);
                }
            }

            ArchivalItems = FilteredArchivalItems;
        }
        else
        {
            ArchivalItems = AllArchivalItems;
        }

        if(TableSearch == "")
        {
            ArchivalItems = AllArchivalItems;
        }
        StateHasChanged();
        if (radzenArchivalItemGrid != null)
        {
            await radzenArchivalItemGrid.Reload();
        }
        //await radzenSimilarArchivalItemGrid.Reload();
        StateHasChanged();

    }

    private async Task HandleDelete(string archivalItemID)
    {
        DeleteID = archivalItemID;
        var DeleteEmployee = await ArchivalRepository.DeleteArchivalItem(DeleteID);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task HandleProvidenceDelete(string providenceID)
    {
        DeleteID = providenceID;
        var DeleteEmployee = await ProvenanceRepository.DeleteProvenanceRecord(DeleteID);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task ProvidenceHandlerUpsert()
    {
        try
        {
            if ((ProvidenceModel.Id != "") && Title == "Update")
            {
                //update
                var UpdateEmployee = await ProvidenceRepository.UpdateProvidence(ProvidenceModel.Id, ProvidenceModel);
            }

            else
            {
                var CreatedEmployee = await ProvidenceRepository.CreateProvidence(ProvidenceModel);
            }

            CreatedProvidence = ProvidenceModel;
            isProvenanceCreated = true;
            FilteredProvenanceRecords = await ProvenanceRepository.GetAllProvenanceRecordsByProvidenceID(CreatedProvidence.Id);

        }
        catch
        {

        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MuseumArchivalAppServer.Areas.StoredModel.StoredItems stored { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IKeywordTagGroupRepository KeywordTagGroupRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IKeywordTagRepository KeywordTagRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IProvidenceRepository ProvidenceRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IProvenanceRecordRepository ProvenanceRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IArchivalItemRepository ArchivalRepository { get; set; }
    }
}
#pragma warning restore 1591
